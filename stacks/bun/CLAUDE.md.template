# CLAUDE.md - Bun Project

This file provides guidance to Claude Code when working with code in this repository.

## Project Overview

[PROJECT DESCRIPTION]

### Technology Stack
- **Runtime**: Bun (latest version)
- **Language**: TypeScript
- **Framework**: [Elysia/Hono/Express compatibility]
- **Testing**: Bun test runner
- **Database**: [SQLite with Bun:sqlite / PostgreSQL]

### Project Structure
```
src/
├── routes/          # HTTP route handlers
├── services/        # Business logic
├── models/          # Data models
├── db/              # Database schemas
└── utils/           # Utilities
tests/
├── unit/
├── integration/
└── bench/           # Performance benchmarks
docs/
└── specs/           # Spec-driven development
```

## Essential Commands

```bash
# Development (via Makefile)
make init           # Install dependencies
make dev            # Start with hot reload
make build          # Build for production
make test           # Run tests
make format         # Format code
make lint           # Run linter

# Bun-specific
bun install         # Fast dependency installation
bun run index.ts    # Direct execution
bun test            # Native test runner
```

## Bun-Specific Features

### Native TypeScript Support
```typescript
// No compilation step needed - run directly
// index.ts
import { serve } from "bun";

serve({
  port: 3000,
  fetch(request) {
    return new Response("Hello from Bun!");
  },
});
```

### Built-in SQLite
```typescript
import { Database } from "bun:sqlite";

const db = new Database("myapp.db");

// Synchronous API for simplicity
const query = db.query("SELECT * FROM users WHERE id = ?");
const user = query.get(userId);

// Prepared statements
const insert = db.prepare(
  "INSERT INTO users (name, email) VALUES (?, ?)"
);
insert.run(name, email);
```

### File System APIs
```typescript
import { file, write } from "bun";

// Read file
const config = await file("config.json").json();

// Write file
await write("output.txt", "Hello, Bun!");

// Stream large files
const stream = file("large.csv").stream();
for await (const chunk of stream) {
  // Process chunk
}
```

## Testing with Bun

### Test Structure
```typescript
// user.test.ts
import { expect, test, describe, beforeEach } from "bun:test";

describe("UserService", () => {
  let service: UserService;
  
  beforeEach(() => {
    service = new UserService();
  });
  
  test("should create user", async () => {
    const user = await service.create({
      name: "Test User",
      email: "test@example.com"
    });
    
    expect(user.id).toBeDefined();
    expect(user.name).toBe("Test User");
  });
  
  test("should validate email", () => {
    expect(() => {
      service.create({ name: "Test", email: "invalid" });
    }).toThrow("Invalid email");
  });
});
```

### Performance Testing
```typescript
// bench.ts
import { bench, run } from "mitata";

bench("JSON parsing", () => {
  JSON.parse('{"hello": "world"}');
});

bench("Database query", async () => {
  await db.query("SELECT * FROM users LIMIT 1").get();
});

await run();
```

## Web Framework (Elysia Example)

### API Routes
```typescript
import { Elysia, t } from "elysia";

const app = new Elysia()
  .get("/", () => "Hello Elysia")
  .get("/users/:id", ({ params: { id } }) => {
    return userService.findById(id);
  })
  .post("/users", ({ body }) => {
    return userService.create(body);
  }, {
    body: t.Object({
      name: t.String(),
      email: t.String({ format: "email" })
    })
  })
  .onError(({ code, error }) => {
    if (code === "VALIDATION") {
      return { error: "Invalid input", details: error.all };
    }
  })
  .listen(3000);
```

### Middleware
```typescript
app.use(async ({ request, set }, next) => {
  const start = Date.now();
  await next();
  console.log(`${request.method} ${request.url} - ${Date.now() - start}ms`);
});
```

## Environment Configuration

### Using Bun's env
```typescript
// Bun automatically loads .env files
const config = {
  port: Bun.env.PORT || "3000",
  database: Bun.env.DATABASE_URL,
  jwtSecret: Bun.env.JWT_SECRET,
};

// Type-safe environment variables
declare module "bun" {
  interface Env {
    PORT: string;
    DATABASE_URL: string;
    JWT_SECRET: string;
  }
}
```

## Performance Optimization

### Fast Hashing
```typescript
// Use Bun's native crypto
const hashedPassword = await Bun.password.hash(password);
const isValid = await Bun.password.verify(password, hashedPassword);
```

### WebSocket Support
```typescript
Bun.serve({
  fetch(req, server) {
    if (server.upgrade(req)) {
      return; // WebSocket upgraded
    }
    return new Response("HTTP response");
  },
  websocket: {
    message(ws, message) {
      ws.send(`Echo: ${message}`);
    },
    open(ws) {
      ws.subscribe("chat");
    },
  },
});
```

### Worker Threads
```typescript
// worker.ts
self.onmessage = (event) => {
  // Heavy computation
  const result = processData(event.data);
  self.postMessage(result);
};

// main.ts
const worker = new Worker("worker.ts");
worker.postMessage(data);
worker.onmessage = (event) => {
  console.log("Result:", event.data);
};
```

## Bundling and Deployment

### Production Build
```typescript
// build.ts
await Bun.build({
  entrypoints: ["./src/index.ts"],
  outdir: "./dist",
  target: "bun",
  minify: true,
  splitting: true,
});
```

### Docker Deployment
```dockerfile
FROM oven/bun:1
WORKDIR /app
COPY package.json bun.lockb ./
RUN bun install --frozen-lockfile
COPY . .
CMD ["bun", "run", "src/index.ts"]
```

## Bun-Specific Best Practices

1. **Leverage Native APIs**: Use Bun's built-in APIs over Node.js polyfills
2. **Synchronous SQLite**: Take advantage of sync API for simpler code
3. **Fast Installation**: Use `bun install` for 10-100x faster installs
4. **Direct Execution**: Run TypeScript directly without build step
5. **Native Testing**: Use built-in test runner over external tools

## Common Patterns

### Error Handling
```typescript
class AppError extends Error {
  constructor(
    message: string,
    public statusCode: number = 500
  ) {
    super(message);
  }
}

// Global error handler for Elysia
app.onError(({ error, set }) => {
  if (error instanceof AppError) {
    set.status = error.statusCode;
    return { error: error.message };
  }
  
  set.status = 500;
  return { error: "Internal server error" };
});
```

### Database Patterns
```typescript
// Repository pattern with Bun:sqlite
export class UserRepository {
  constructor(private db: Database) {
    this.createTable();
  }
  
  private createTable() {
    this.db.run(`
      CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        email TEXT UNIQUE NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
  }
  
  findById(id: number) {
    return this.db.query("SELECT * FROM users WHERE id = ?").get(id);
  }
  
  create(data: CreateUserDto) {
    const stmt = this.db.prepare(
      "INSERT INTO users (name, email) VALUES (?, ?) RETURNING *"
    );
    return stmt.get(data.name, data.email);
  }
}
```